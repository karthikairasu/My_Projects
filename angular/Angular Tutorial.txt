npm install -g @angular/cli
ng new my-app
cd my-app
ng serve --open
ng serve --port 3001 --open
npm install bootstrap jquery popper.js --save
ng generate component dashboard
dir
npm cache clean --force
data.js file write data array
package.json - "json": "json-server data.js -p 3500"
npm run json
node sever - 
ng add @angular/pwa -
ng build --prod

caniuse.com
http protocol vs web socket(best)
paul irish list of polyfills github

design patterns addy osmani -Learning JavaScript Design Patterns
Book by Addy Osmani

The Principles of Object-Oriented JavaScript-Book by Nicholas C. Zakas 

The-Problem-with-Native-JavaScript-APIs book by nicholas c. zakas pdf

javascript patterns by stoyan stefanov

IndexOf design pattern

/=================Angular Training=================/
Java script:
     activation object
     scope chain execution
     execution context

     widow is global scope

JavaScript has 3 types of scope:

          - Block scope - let and const, Variables declared inside a { } block cannot be accessed from  outside the block

          - Function scope - Variables declared with var, let and const are quite similar when declared     inside a function.                   

          - Global scope - Variables declared Globally (outside any function) have Global Scope.
===============================================================================================
 ES3- ES5 - prototypal language

 ES6 - class, modules, arrow function, spread, rest etc, promises -Classes instead of prototypes .modules

 Typescript both transpiler an a language

      ES6 - Browser issues write code es6 and deploy to es5, es5 support all browser

      Es6 transpiler -> Es5 to old browser working
      .ts               .js

 Typescript - language(strict typing features)

 RXJS  - Reactive extensions for javascript

 imperative V/s Reactive Programming

* antipattern is worest practice
* faux function
* shared script arhitecture
-----------------------------------------------------------------------------------------------
dependencies - bootstrap

         npm install bootstrap

devDependencies - Typescript
         only development dependencies

All javascript (es3, es4, es5) is valid typescript

* let is local
* var is global

Example:
 file 2.ts

ES6 - let and const faux function
-----------------------------------------------------------------------------------------------
curly brackets as a constructor for javascript

function a(){
    this.x=100;
}

b = new a();

b{
    this.x=100;
}
console.log(b.x);
-----------------------------------------------------------------------------------------------
closure
       nested function

anonymous function
b = function(){

}
b(); b knows anonymous function

nested function is called closure
-----------------------------------------------------------------------------------------------
SSA - shared script arhitect

var adam:{}
adam.x=100;

var varun = {};
varun.x="hello world"

console.log()

export and import done
-----------------------------------------------------------------------------------------------
single thread - javascript
code cruncing
event handling
dom manipulation

ajax - new thread

"example.txt" internal state [pending]
"example.txt" internal state [fulfilled] //reslove
"example.txt" internal state [reject]

then called thenable


polling (ever time update) and
server push (state change to update)-state change monitor

Observable - Monitor for state change ->

     publish / emit

     subscriber

-----------------------------------------------------------------------------------------------
server

     service -Observable / dependency

     component - observer / dependent


* one operator do one task is reactive program(softly coupled)
* tightly coupled
* reactive program unpredictable data (server data)
* backendjs learn
-----------------------------------------------------------------------------------------------
function abc(x,y) {

    console.log(arguments[0]);

}
abc(10,20);

Subject also known as Pusable Observables
example3_29.js

navigator.online -> current status

Event stream
Observable - state change -> pub...
observer   - subscribe
Hot & Cold Observables
Pub - Sub pattern
Subject

-----------------------------------------------------------------------------------------------
rxjs
Dependency Injection

          - Spot a Dependency - when a scope consumes an entity which is not being locally declared.
          - All Dependencies are "Observable" - monitor for state changes -> pub..
          - All Dependents are "Observer" - subscribers...
          - same entity can play multiple roles - both as Dependent & Dependencies




          function  a(){
               var x = 100;
               return x;
          }
          a();

          function b(a) {  // observer b
               console.log(a.x); //100
               var y= a.x;
               return y;
          }
          b();

          function c(b){ //observer c
               console.log(b.y); //200
          }
          c();
-----------------------------------------------------------------------------------------------
          Server

          function  model(){  // service

               var x = 100;

               return x;
          }
          model();

          function component(model) {  // View model

               console.log(model.x); //100

               var y= model.x;

               return y;
          }
          component();

          function view(component){ // template - Bindings - property binding / data flow & event bindings Inverse data flows

               console.log(component.y); //200

          }
          view();  - form

          User

          * model- parent
          * component- child
          * parent to child - data flow
          * child to parent - event flow or Inverse data flow
===============================================================================================
     Angular - large scale apps

        - SPA's - Single page applications

        - Google

        - inbuild dependency Injection

        - performance

        - easy to unit test

        - enterprise based applications - large scale apps

     React - small - medium

     Vue Js - small


        * 17000 lines  of code - Misko Havery

        * 1500 lines of code - angularjs

        * angularjs - angular 2 is 3 times faster to angularjs
------------------------------------------------------------------------------------------------
rxjs -
zone.js -  looking for state change

 Every ng command angular json file first load

     - ng serve --port 3001 --open

     - angular.json

     - main.ts

         app.module.ts

            app.component.ts

angular we have injector service is build in service (<todo></todo>)

angular  - injector service -> buid in service
             |
           dependancy resolution

component - parent - dependency - Observables
template  - child  - dependent - Observer

model:

     structure
     validation
     association
     data
     data repository(CRUD methods)

component:


(app.modules.ts)import -> block script
defer -
auto import browsermodule
-----------------------------------------------------------------------------------------------

Ng... - directives -> attributes in elements

                         Controls the Render       Contains Micro Template ?      Bindings?
                         of the Host element?

Attributes directives          no                        no                       No bindings (by default)

                                                                                  can utilize 2 way binding with
                                                                                   [] - property binding
                                                                                   &
                                                                                   () - event binding

       &

Structural directives           yes                       yes                      property binding
                                                                                   (by default)



precise syntax for Structural directives - *

-----------------------------------------------------------------------------------------------
Dom is static
Directives is dynamic

* elementRef

*ngFor -
          index
          first
          last
          odd
          even

data update layers--

     structure
     |
     data
     |
     repository
     |
     component
     |
     template

ngModel is the exclusive directive which can assist a form control:

     - state management

     - validation

#todoText - # elementRef -> angular entity
===============================================================================================
Ecom - Project

npm install

ng serve --port 3001 --open

npm run json

npm clear chache

Root and Feature

   - Root component should not directly deal with model and template

   - internal and external component to root template anti-pattern

   - SRP - root module -> load root component

   - SRP - root component -> load feature component

   1. Store component eg: store -> deals categories of products 

   2. cart detail -> list of products

   3. checkout ->to deal with form validation

Root Vs Feature

  - Component Intercommunication - angular services / injectables

  - Routing

  - Form Validation

  - Model & store - arhitecture

  - Dependency Injections
  

model - only services

       - structure
       - Validation
       - association
       - data(static or dynamic)
       - data repository(CRUD methods) 


store - non services - feature component

       - store.component.ts            

       - store.component.ts 

app is root module and model, store is feature modules

process -> services  -> feature component -> app module

* dependancy injection refer

Fake Rest ApI -

    .js or .Json
        
     
when dependency check model module dependent 

function abc(){
     this.x=100;  // privillage 
}

a = new abc();

singleton

a= new Object();

b= new Object();

Object.prototype.abc=function(){

}
a.

*product.repository.ts refer process
===============================================================================================
template ->store.component -> product.repository methods -> static.datasource

* ? - is nullable operator in typescript

$event - angular Variable 

map - is looping methods

Injectable(dependent) -> Staticdatasource (Dependency) -> model.module.ts

static data only use from operator

store module only -> feature template declaration
model module only -> service handling

Routing mechanism - switching between feature components based on user events & BrowserURL state.

part 1 - Hashbang - user events which modifies a state in the BrowserURL

    non Angular - <a href="#sent">click here</a>

    Angular :

           - template navigate -> routerLink="/store"

           - non-template      -> this.router.navigateByUrl("/cart");

part 2 - Implicit - BrowserURL state is an implicit Observable/Event Stream - managed RXJS

         state change -> publish.....

part 3 - RouterStateTree -
       
        Subscribes to the state being published by the browserURL and serves a feature component accordingly.


        RouterModule.forRoot([{
          path:'',
          component: ''
        }])


part 4 - Routing Placeholder - <router-outlet> </router-outlet>

        it serves the feature component provided by  the RouterStateTree

Non first navigate 


route guard - angular version 6

     canActivate - 


-----------------------------------------------------------------------------------------------
products.model.ts                                            order.model.ts

     localhost:3500/products                                 localhost:3500/orders

     rest.datasource.ts (structure)                          rest.datasource.ts

     product.repository.ts (structure)                       order.repository.ts

     store.component.ts (structure)                          checkout.component.ts

     store.component.html                                    checkout.component.html

* never call ajax template, component, repository
* structure - flow above things
* component - any component load constructor first

Angular - Validation - novalidate is disable dom default validation
        
        validators[required, minlength, maxlength, pattern] - validators array

        validators.compose[Limit]

3 validation Classes

       - valid -generic

       - invalid -generic

       - errors - specific

     either to a Form control or a Form group

     ngModel - who can help a form control

          - state changes

               &

          - Validation

* form-control validation for user (error nodification) and form-group validation for server

#name = "ngModel"                                            #form = "ngform"
    
* All directive is views

===============================================================================================
Augury

Lazy loading of Angular Modules - on demand

sub routing features - 

Tested our Observables

component intercommunication vs BrowserURL Params


                           BrowserURL -      

                                               RouterTree - mode=edit & id=1      


          routerLink                                       

  
productTable                                                    ProductEditer


uncertain things only make to Observable, otherwise static structure (for ex: product structure)

* PWO - Progressive Web application 

* npm install @angular/pwa
  
  web

  native app

    - web + Progress features

    - offile dectection


- service workers api - html5 api

- .ts -> .js -ng build --prod 

-----------------------------------------------------------------------------------------------

x = new Rx.Subject(); // onNext(), onCompleted(); Pushables Observables

x.onNext('hello'); state change -> pub...

x.subscribe((a)=>console.log(a));

* 842kb size only in js file

File Server - accept request, resopnse / error - server.js

-----------------------------------------------------------------------------------------------

middleware                                                          node
                                                                      |
express - middleware                                                Connect (middle)
                                                                      |
connect - middleware - supported by node.                           Express(middle)

express is to  node..js what jquery is to javascript

 ----------------------------------------------------------------------------------------------
 Error Handling
 ----------------------------------------------------------------------------------------------
 local component


 local service


 global service = http integration


 * httpclients handle all errors for ajax calling
 * if you use catchError and use throwerror confirm use

app.module.ts

             -  providers: [
               {
                    provide: HTTP_INTERCEPTORS,
                    useClass: HttpInterceptorService,
                    multi: true,
               },
               ],
===============================================================================================
