npm install -g @angular/cli
ng new my-app
cd my-app
ng serve --open
ng serve --port 3001 --open
npm install bootstrap jquery popper.js --save
ng generate component dashboard



/=================Angular Training=================/
Java script:
     activation object  
     scope chain execution 
     execution context 

     widow is global scope

JavaScript has 3 types of scope:

Block scope - let and const, Variables declared inside a { } block cannot be accessed from outside the block
Function scope - Variables declared with var, let and const are quite similar when declared inside a function.
Global scope - Variables declared Globally (outside any function) have Global Scope.
===============================================================
 ES3- ES5 - prototypal language

 ES6 - class, modules, arrow function, spread, rest etc, promises -Classes instead of prototypes .modules

 Typescript both transpiler an a language

      ES6 - Browser issues write code es6 and deploy to es5, es5 support all browser

      Es6 transpiler -> Es5 to old browser working
      .ts               .js

 Typescript - language(strict typing features)

 RXJS  - Reactive extensions for javascript

 imperative V/s Reactive Programming

* antipattern is worest practice
* faux function
* shared script arhitecture
------------------------------------------------------------------------
dependencies - bootstrap

         npm install bootstrap

devDependencies - Typescript
         only development dependencies

All javascript (es3, es4, es5) is valid typescript

* let is local
* var is global

Example:
 file 2.ts 

ES6 - let and const faux function
-----------------------------------------------------------
curly brackets as a constructor for javascript

function a(){
    this.x=100;
}

b = new a();

b{
    this.x=100;
}
console.log(b.x);
--------------------------------------------------------
closure
       nested function 

anonymous function
b = function(){

}
b(); b knows anonymous function

nested function is called closure
-----------------------------------------------
SSA - shared script arhitect

var adam:{}
adam.x=100;

var varun = {};
varun.x="hello world"

console.log()

export and import done
-----------------------------------------------
single thread - javascript
code cruncing
event handling
dom manipulation

ajax - new thread

"example.txt" internal state [pending]
"example.txt" internal state [fulfilled] //reslove
"example.txt" internal state [reject]

then called thenable


polling (ever time update) and 
server push (state change to update)-state change monitor

Observable - Monitor for state change ->

     publish / emit

     subscriber

--------------------------------------------
server

     service -Observable / dependency

     component - observer / dependent


* one operator do one task is reactive program(softly coupled)
* tightly coupled
* reactive program unpredictable data (server data)
* backendjs learn
------------------------------------------------------------------------
function abc(x,y) {
    
    console.log(arguments[0]);

}
abc(10,20);

Subject also known as Pusable Observables
example3_29.js

navigator.online -> current status 

Event stream
Observable - state change -> pub...
observer   - subscribe
Hot & Cold Observables
Pub - Sub pattern
Subject

-----------------------------------------------------------------------------
rxjs
Dependency Injection 

          - Spot a Dependency - when a scope consumes an entity which is not being locally declared.
          - All Dependencies are "Observable" - monitor for state changes -> pub..
          - All Dependents are "Observer" - subscribers...
          - same entity can play multiple roles - both as Dependent & Dependencies


 

          function  a(){ 
               var x = 100;
               return x;
          }
          a();

          function b(a) {  // observer b
               console.log(a.x); //100
               var y= a.x;
               return y;
          }
          b();

          function c(b){ //observer c
               console.log(b.y); //200
          }
          c();
      --------------------------------------------------
          Server

          function  model(){  // service

               var x = 100;

               return x;
          }
          model();

          function component(model) {  // View model 

               console.log(model.x); //100

               var y= model.x;

               return y;
          }
          component();

          function view(component){ // template - Bindings - property binding / data flow & event bindings Inverse data flows

               console.log(component.y); //200

          }
          view();  - form

          User

          * model- parent
          * component- child
          * parent to child - data flow
          * child to parent - event flow or Inverse data flow
=======================================================================================
     Angular - large scale apps

        - SPA's - Single page applications

        - Google

        - inbuild dependency Injection

        - performance

        - easy to unit test

        - enterprise based applications - large scale apps

     React - samll - medium

     Vue Js - small


        * 17000 lines  of code - Misko Havery
 
        * 1500 lines of code - angularjs

        * angularjs - angular 2 is 3 times faster to angularjs
----------------------------------------------------------------------------------------
rxjs - 
zone.js -  looking for state change
 
 Every ng command angular json file first load

     - ng serve --port 3001 --open

     - angular.json

     - main.ts
         
         app.module.ts
            
            app.component.ts

angular we have injector service is build in service (<todo></todo>)
        
angular  - injector service -> buid in service 
             |
           dependancy resolution

component - parent - dependency - Observables
template  - child  - dependent - Observer

model:

     structure
     validation
     association
     data
     data repository(CRUD methods)

component:


(app.modules.ts)import -> block script
defer - 
auto import browsermodule
-------------------------------------------------------------------------------------------------------------------

Ng... - directives -> attributes in elements
                               
                         Controls the Render          Contains Micro Template ?       Bindings?
                         of the Host element?
 
Attributes directives          no                            no                       No bindings (by default)

                                                                                      can utilize 2 way binding with
                                                                                      [] - property binding
                                                                                      &
                                                                                      () - event binding

       &

Structural directives           yes                          yes                      property binding(by default)



precise syntax for Structural directives - *

--------------------------------------------------------------------------------------------------------------------
Dom is static
Directives is dynamic

* elementRef

*ngFor -
          index 
          first 
          last 
          odd 
          even

data update layers--

     structure
     |
     data
     |
     repository
     |
     component
     |
     template

ngModel is the exclusive directive which can assist a form control:

     - state management

     - validation

#todoText - # elementRef -> angular entity